<?php
/*
* @Name
* @Description
* @Author 余亚勇
* @Date 2023/10/21 17:50
*/

namespace Modules\Common\Exceptions;


use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\ValidationException;
use Throwable;
use Modules\Common\Exceptions\ApiException;

class Handler extends ExceptionHandler
{
    /**
     * The list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     */
    public function register(): void
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    public function render($request, Throwable $e): \Illuminate\Http\Response|\Illuminate\Http\JsonResponse|\Illuminate\Http\RedirectResponse|\Symfony\Component\HttpFoundation\Response
    {
//        return parent::render($request, $e); // TODO: Change the autogenerated stub
        if($request -> is('api/*')) {
//            dd($request -> all());
//            $result = [
//                'code' => 400,
//                'status' => 1,
//                'message' => array_values($e -> errors())[0][0]
//            ];
//            if($e instanceof  ValidationException){
//                return response() -> json($result, $result['code']);
//            }
            if ($e instanceof  ApiException) {
                $result = [
                    'code' => $e -> getCode(),
                    'message' => $e -> getMessage()
                ];
            } else {
                $result = [
                    'code' => 400,
                    'message' => array_values($e -> errors())[0][0],
                ];
            }
            return response() -> json($result, 400);
        }

        return parent::render($request, $e);
    }
}
